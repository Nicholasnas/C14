name: Consulta CEP poetry

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

env:
  PYTHON_VERSION: '3.11' # Vers√£o est√°vel do Python
  # Vari√°vel de ambiente para notifica√ß√£o (Requisito)
  EMAIL_TO: ${{ secrets.EMAIL_DE_NOTIFICACAO }} 

jobs:
  # Job 1: Execu√ß√£o dos Testes
  # Roda em paralelo com o 'build', atendendo ao requisito de paralelismo.
  test:
    name: üß™ Executa os Testes
    runs-on: ubuntu-latest
    steps:
      - name: 1. Checkout do C√≥digo
        uses: actions/checkout@v4

      - name: 2. Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      # Requisito: Instalar software via script/command
      - name: 3. Instalar Poetry e Depend√™ncias
        run: |
          pip install poetry
          # Instala depend√™ncias do projeto e de desenvolvimento
          poetry install
          
      - name: 4. Rodar Testes Unit√°rios e Gerar Relat√≥rio XML
        # Assume que voc√™ configurou 'pytest-junitxml' nas depend√™ncias de desenvolvimento do Poetry
        run: poetry run pytest tests/ --junitxml=test-report.xml

      # Requisito: Armazenar Relat√≥rio de Testes como Artefato
      - name: 5. üì¶ Upload do Relat√≥rio de Testes
        uses: actions/upload-artifact@v4
        with:
          name: Relatorio-Testes-XML
          path: test-report.xml

  # Job 2: Empacotamento (Build)
  # Roda em paralelo com o 'test'.
  build:
    name: üèóÔ∏è Empacotamento (Build)
    runs-on: ubuntu-latest
    steps:
      - name: 1. Checkout do C√≥digo
        uses: actions/checkout@v4

      - name: 2. Configurar Vers√£o do Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: 3. Instalar Poetry
        run: pip install poetry

      - name: 4. Empacotar o Projeto
        run: poetry build

      # Requisito: Armazenar o Pacote como Artefato
      - name: 5. üì¶ Upload do Pacote de Distribui√ß√£o
        uses: actions/upload-artifact@v4
        with:
          name: Pacote-Distribuicao-CEP
          path: dist/
          
  # Job 3: Notifica√ß√£o (Requisito de 3¬∫ job)
  notify:
    name: üìß Notifica√ß√£o de Status
    runs-on: ubuntu-latest
    # Depende de ambos os jobs anteriores para garantir que os artefatos foram gerados
    needs: [test, build] 
    # Roda sempre, mesmo se 'test' ou 'build' falhar, para enviar a notifica√ß√£o
    if: always() 
    steps:
      - name: 1. Checkout do C√≥digo
        uses: actions/checkout@v4
        
      # Requisito: Instalar software via script (dando permiss√£o ao notify.sh)
      - name: 2. Dar Permiss√£o de Execu√ß√£o ao Script
        run: chmod +x notify.sh

      # Requisito: Chamar um script para enviar e-mail
      # Passa o status do Job 'test' como argumento
      - name: 3. Executar Script de Notifica√ß√£o
        run: ./notify.sh ${{ needs.test.result }}
        env:
          # Requisito: E-mail n√£o hardcoded, mas sim como vari√°vel de ambiente
          EMAIL_TO: ${{ env.EMAIL_TO }}
